{"version":3,"sources":["components/shiftTextComponent.tsx","theme/themes.ts","theme/index.ts","components/appHeader.tsx","utils/urlUtil.ts","containers/homePage.tsx","redux/actionTypes.ts","redux/actions/settingsAction.ts","utils/colorUtil.ts","components/preferenceGroup.tsx","components/preferenceItem.tsx","containers/tabs/appearanceTab.tsx","containers/tabs/languageTab.tsx","containers/tabs/aboutTab.tsx","containers/tabs/sloganTab.tsx","components/responsive.tsx","containers/settingsPage.tsx","locale/zhHans.ts","locale/zhHant.ts","locale/enUS.ts","locale/index.ts","app.tsx","utils/registerServiceWorker.ts","redux/reducers/settingsReducer.ts","redux/reducers/index.ts","redux/configureStore.ts","index.tsx"],"names":["ShiftTextComponent","index","state","displayText","updateIndex","slogan","_this","props","undefined","setState","length","setTimeout","interval","timer","this","setInterval","clearInterval","split","display","i","push","react_default","a","createElement","key","react_markdown_default","renderers","paragraph","allowedTypes","source","style","userSelect","textAlign","fontSize","color","fontColor","react_addons_css_transition_group_default","transitionLeaveTimeout","transitionEnterTimeout","transitionName","Component","defaultProps","White","primary","primaryDark","background","accent","textPrimary","textSecondary","Light","Dark","Black","ChromeDark","getTheme","theme","toLowerCase","Container","styled","div","_templateObject","Title","h1","_templateObject2","AppHeader","_this$props","title","leftExtra","rightExtra","Object","objectSpread","width","marginRight","flex","marginLeft","getQueryParamsFromUrl","query","URLSearchParams","window","location","search","get","Root","homePage_templateObject","HomePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSlogan","trim","messages","defineMessages","defaultSlogan","id","intl","formatMessage","map","item","filter","mouseCountdown","handleMouseMove","idle","clearTimeout","palette","settingsIcon","react_router_dom","to","index_esm","cursor","alignItems","justifyContent","onMouseMove","appHeader","position","top","boxSizing","height","shiftTextComponent","connect","replace","language","settings","injectIntl","UPDATE_LANGUAGE","UPDATE_THEME","UPDATE_SLOGAN","updateLanguage","type","updateTheme","updateSlogan","hexToRgbA","hex","alpha","arguments","test","c","substring","uc","parseInt","join","concat","Error","preferenceGroup_templateObject","PreferenceGroup","titleId","children","index_es","text","preferenceGroup_Title","preferenceItem_templateObject","PreferenceItem","actionView","itemView","preferenceItem_Container","borderColor","ThemeBlockContainer","appearanceTab_templateObject","ThemeBlockSelection","appearanceTab_templateObject2","AppearanceTab","scheme","themeBlock","value","onClick","handle","v","backgroundColor","preferenceGroup_PreferenceGroup","preferenceItem_PreferenceItem","LanguageTab","onSelect","e","target","className","onChange","AboutTab","about","role","aria-label","packageJson","version","href","rel","fontWeight","SloganTab","showSyntax","saveSuccess","setSlogan","onTextChange","onSave","alert","onReset","onSyntaxArrowClick","customTab","TextareaAutosize","spellCheck","paddingRight","paddingLeft","verticalAlign","flexDirection","Mobile","react_responsive_default","assign","maxWidth","Tablet","minWidth","Default","settingsPage_templateObject","Sider","settingsPage_templateObject2","NavItem","_templateObject3","ContentContainer","_templateObject4","mapStateToProps","mapDispatchToProps","dispatch","SettingsPage","showMenu","m","page","match","meta","name","Helmet","renderRedirect","react_router","url","content","exact","path","component","render","links","closeIcon","moreIcon","settingsPage_Root","responsive_Default","responsive_Tablet","responsive_Mobile","link","activeClassName","activeStyle","zhHans","appName","slogan.default","action.ok","action.save","action.save.success","action.cancel","action.reset","settings.application","settings.appearance","settings.language","settings.language.default","settings.about","settings.slogan","settings.slogan.syntax","settings.slogan.syntax.summary","settings.slogan.custom","settings.slogan.interval","settings.about.release_note","settings.appearance.theme","settings.appearance.theme.white","settings.appearance.theme.black","settings.appearance.theme.light","settings.appearance.theme.dark","settings.appearance.theme.chrome-dark","zhHant","enUS","getLocale","navigator","userLanguage","toLocaleLowerCase","addLocaleData","toConsumableArray","en","zh","App","charSet","route","locale","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","initialState","rootReducer","combineReducers","action","types","middlewares","logger","createStoreWithMiddleware","applyMiddleware","apply","createStore","enhancer","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","persistConfig","storage","persistedReducer","persistReducer","store","ReactDOM","es","integration_react","persistor","persistStore","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.75a944fe.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactMarkdown from 'react-markdown'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { ColorProperty, TextAlignProperty } from 'csstype'\n\ninterface Props {\n  slogan?: string[],\n  interval: number,\n  fontColor: ColorProperty,\n  fontSize: number,\n  textAlign: TextAlignProperty\n}\n\nclass ShiftTextComponent extends Component<Props> {\n  static defaultProps = {\n    fontSize: 64,\n    fontColor: '#000',\n    textAlign: 'left',\n    slogan: [],\n    interval: 3,\n  }\n\n  index = 0\n\n  state = {\n    displayText: '',\n  }\n\n  updateIndex = () => {\n    const slogan = this.props.slogan\n    if (slogan === undefined) {\n      this.setState({\n        displayText: '',\n      })\n    } else {\n      if (this.index >= slogan.length * 2) {\n        this.index = 0\n      }\n      if (this.index % 2 === 1) {\n        this.setState({\n          displayText: '',\n        })\n        setTimeout(() => this.updateIndex(), this.props.interval * 1000 * 0.2)\n      } else {\n        this.setState({\n          displayText: slogan[this.index / 2],\n        })\n      }\n      this.index++\n    }\n  }\n\n  timer: number | undefined = undefined\n\n  componentDidMount() {\n    this.updateIndex()\n    this.timer = setInterval(this.updateIndex, this.props.interval * 1000)\n  }\n\n  componentWillUnmount() {\n    if (this.timer !== undefined) {\n      clearInterval(this.timer)\n    }\n  }\n\n  render() {\n    const split = this.state.displayText ? this.state.displayText.split('|') : []\n    const display = []\n    for (let i = 0; i < split.length; i++) {\n      if (i > 0) {\n        display.push(<br key={i * 2 - 1}/>)\n      }\n      display.push(\n        <ReactMarkdown\n          key={i * 2}\n          renderers={{ paragraph: 'span' }}\n          allowedTypes={[\n            'root', 'paragraph', 'emphasis',\n            'strong', 'delete', 'link', 'linkReference',\n            'text',\n          ]}\n          source={split[i]}/>,\n      )\n    }\n    return (\n      <div style={{\n        userSelect: 'none',\n        textAlign: this.props.textAlign,\n        fontSize: this.props.fontSize,\n        color: this.props.fontColor,\n      }}>\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={this.props.interval * 1000 * 0.2}\n          transitionEnterTimeout={this.props.interval * 1000 * 0.2}\n          transitionName='fade'>\n          {display}\n        </ReactCSSTransitionGroup>\n      </div>\n    )\n  }\n}\n\nexport default ShiftTextComponent\n","import { Theme } from './index'\n\nexport const White = {\n  primary: '#fff',\n  primaryDark: '#fff',\n  background: '#fff',\n  accent: '#000',\n  textPrimary: '#000',\n  textSecondary: '#757575',\n} as Theme\n\nexport const Light = {\n  primary: '#fefefe',\n  primaryDark: '#f5f5f5',\n  background: '#F5F5F5',\n  accent: '#000',\n  textPrimary: '#212121',\n  textSecondary: '#9E9E9E',\n} as Theme\n\nexport const Dark = {\n  primary: '#323639',\n  primaryDark: '#282c2f',\n  background: '#303030',\n  accent: '#fff',\n  textPrimary: '#fafafa',\n  textSecondary: '#d6d6d6',\n} as Theme\n\nexport const Black = {\n  primary: '#1c2226',\n  primaryDark: '#1b2024',\n  background: '#000',\n  accent: '#fff',\n  textPrimary: '#fff',\n  textSecondary: '#a0a0a1',\n} as Theme\n\nexport const ChromeDark = {\n  primary: '#333639',\n  primaryDark: '#292c2f',\n  background: '#202124',\n  accent: '#fff',\n  textPrimary: '#f1f3f4',\n  textSecondary: '#9ba0a5',\n} as Theme\n","import { Black, Dark, White, Light, ChromeDark } from './themes'\nimport { ColorProperty } from 'csstype'\n\nexport interface Theme {\n  primary: ColorProperty,\n  primaryDark: ColorProperty,\n  background: ColorProperty,\n  accent: ColorProperty,\n  textPrimary: ColorProperty,\n  textSecondary: ColorProperty,\n}\n\nexport function getTheme(theme?: string): Theme {\n  switch (theme ? theme.toLowerCase() : '') {\n    case 'light':\n      return Light\n    case 'dark':\n      return Dark\n    case 'white':\n      return White\n    case 'black':\n      return Black\n    case 'chrome-dark':\n      return ChromeDark\n    default:\n      return Light\n  }\n}\n","import React, { Component, CSSProperties, ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 64px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 48px 16px;\n`\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n`\n\nclass AppHeader extends Component<{\n  title?: string | JSX.Element,\n  rightExtra?: ReactNode\n  leftExtra?: ReactNode\n  style?: CSSProperties\n}> {\n  render() {\n    const { title, leftExtra, rightExtra } = this.props\n    return (\n      <header style={{\n        width: '100%',\n        ...this.props.style,\n      }}>\n        <Container>\n          {\n            leftExtra === undefined ? undefined :\n              <div style={{ marginRight: 16, }}>\n                {leftExtra}\n              </div>\n          }\n          <Title>{title}</Title>\n          <div style={{ flex: 1 }}/>\n          {\n            rightExtra === undefined ? undefined :\n              <div style={{ marginLeft: 16 }}>\n                {rightExtra}\n              </div>\n          }\n        </Container>\n      </header>\n    )\n  }\n}\n\nexport default AppHeader\n","export const getQueryParamsFromUrl = (query: string): string | null => {\n  return new URLSearchParams(window.location.search).get(query)\n}\n","import React, { Component } from 'react'\nimport ShiftTextComponent from '../components/shiftTextComponent'\nimport './homePage.css'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getTheme } from '../theme'\nimport { InjectedIntl, defineMessages, injectIntl } from 'react-intl'\nimport AppHeader from '../components/appHeader'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { MdSettings } from 'react-icons/md'\nimport styled from 'styled-components'\nimport { getQueryParamsFromUrl } from '../utils/urlUtil'\n\nconst Root = styled.div`\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n\n  @media (max-width: 768px) {\n    padding-top: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n`\n\ninterface Props {\n  slogan: string\n  intl: InjectedIntl\n  theme: string\n}\n\ninterface State {\n  idle: boolean\n}\n\nclass HomePage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      idle: true,\n    }\n  }\n\n  getSlogan = (): string[] => {\n    let slogan = this.props.slogan\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      slogan = intl.formatMessage(messages.defaultSlogan)\n    }\n\n    return slogan.split('\\n')\n      .map(item => item.trim())\n      .filter(item => item.length > 0)\n  }\n\n  mouseCountdown: number | undefined = undefined\n\n  handleMouseMove = () => {\n    if (this.state.idle) {\n      this.setState({\n        idle: false,\n      })\n    }\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n    this.mouseCountdown = window.setTimeout(\n      () => this.setState({\n        idle: true,\n      }), 2000)\n  }\n\n  componentWillUnmount() {\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n  }\n\n  render() {\n    const palette = getTheme(this.props.theme)\n\n    const settingsIcon = (\n      <Link to={'/settings'}>\n        <h1><MdSettings\n          style={{\n            color: palette.textSecondary,\n            cursor: 'pointer',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}/></h1>\n      </Link>\n    )\n    return (\n      <Root\n        style={{\n          background: palette.background,\n          cursor: this.state.idle ? 'none' : 'default',\n        }}\n        onMouseMove={this.handleMouseMove}>\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={500}\n          transitionEnterTimeout={300}\n          transitionName='fade'>\n          {this.state.idle ? undefined :\n            <AppHeader\n              style={{ position: 'absolute', top: 0, }}\n              rightExtra={settingsIcon}/>\n          }\n        </ReactCSSTransitionGroup>\n        <main style={{\n          boxSizing: 'border-box',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center',\n        }}>\n          <ShiftTextComponent\n            textAlign={'center'}\n            fontColor={palette.textPrimary}\n            fontSize={72}\n            slogan={this.getSlogan()}\n          />\n        </main>\n      </Root>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  let slogan = getQueryParamsFromUrl('slogan')\n  if (slogan) {\n    slogan = slogan.replace('||', '\\n')\n  }\n\n  return {\n    language: state.settings.language,\n    theme: getQueryParamsFromUrl('theme') || state.settings.theme,\n    slogan: slogan || state.settings.slogan,\n  }\n}\n\nexport default connect(mapStateToProps)(injectIntl(HomePage))\n","export const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'\n\nexport const UPDATE_THEME = 'UPDATE_THEME'\n\nexport const UPDATE_SLOGAN = 'UPDATE_SLOGAN'\n","import {\n  UPDATE_LANGUAGE,\n  UPDATE_SLOGAN,\n  UPDATE_THEME,\n} from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nexport const updateLanguage = (language: string): AnyAction => ({\n  type: UPDATE_LANGUAGE,\n  language,\n})\n\nexport const updateTheme = (theme: string): AnyAction => ({\n  type: UPDATE_THEME,\n  theme,\n})\n\nexport const updateSlogan = (slogan: string): AnyAction => ({\n  type: UPDATE_SLOGAN,\n  slogan,\n})\n","export function hexToRgbA(hex: string, alpha = 1) {\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    let c = hex.substring(1).split('')\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n    }\n    const uc = parseInt('0x' + c.join(''), 16)\n\n    return `rgba(${[(uc >> 16) & 255, (uc >> 8) & 255, uc & 255].join(',')},${alpha})`\n  }\n  throw new Error('Bad Hex')\n}\n","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Title = styled.div`\n  padding: 16px 0;\n  font-weight: bold;\n  font-size: 1.5rem;\n`\n\nexport default class PreferenceGroup extends Component<{\n  title?: string | JSX.Element,\n  titleId?: string\n}> {\n  render() {\n    const { title, titleId, children } = this.props\n\n    if (titleId !== undefined) {\n      return (\n        <div>\n          <FormattedMessage id={titleId}>\n            {text => <Title>{text}</Title>}\n          </FormattedMessage>\n          <div>\n            {children}\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <Title>{title}</Title>\n        <div>\n          {children}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component, ReactNode } from 'react'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 16px 0;\n  margin-bottom: 16px;\n  border: 0 solid;\n  border-bottom-width: 1px;\n`\n\ninterface Props {\n  title?: string,\n  titleId?: string,\n  actionView?: ReactNode\n  theme?: string\n}\n\nexport default class PreferenceItem extends Component<Props> {\n  render(): ReactNode {\n    const { title, titleId, actionView } = this.props\n    const itemView = (\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          {\n            titleId ?\n              <FormattedMessage id={titleId}/> :\n              <span>{title}</span>\n          }\n        </div>\n        <div style={{ flex: 2 }}>\n          <div>{actionView}</div>\n        </div>\n      </div>\n    )\n\n    return (\n      <Container style={{\n        borderColor: hexToRgbA(getTheme(this.props.theme).textSecondary, 0.2),\n      }}>\n        {itemView}\n        {this.props.children}\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { hexToRgbA } from '../../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport styled from 'styled-components'\nimport { AnyAction } from 'redux'\n\nconst ThemeBlockContainer = styled.div`\n  margin: 8px;\n  display: inline-block;\n  border: 1px solid;\n  border-radius: 8px;\n  padding: 16px 16px 14px;\n  user-select: none;\n  cursor: pointer;\n  font-size: 1rem;\n`\n\nconst ThemeBlockSelection = styled.div`\n  height: 2px;\n  margin-top: 2px;\n  border-width: 0;\n  border-radius: 2px;\n`\n\ninterface Props {\n  theme?: string,\n\n  updateTheme(theme: string): AnyAction\n}\n\nclass AppearanceTab extends Component<Props> {\n  render() {\n    const { theme, updateTheme } = this.props\n    if (theme === undefined) {\n      updateTheme('light')\n    }\n    const scheme = getTheme(theme)\n    const themeBlock = (titleId: string, value: string) => {\n      return (\n        <ThemeBlockContainer\n          onClick={\n            (\n              (handle, v) => () => handle(v)\n            )(updateTheme, value)\n          }\n          style={{\n            borderColor: hexToRgbA(scheme.textSecondary, 0.2),\n            color: getTheme(value).textPrimary,\n            backgroundColor: getTheme(value).background,\n          }}>\n          <FormattedMessage id={titleId}/>\n          <ThemeBlockSelection style={{\n            backgroundColor: value === theme ? scheme.accent : 'transparent',\n          }}/>\n        </ThemeBlockContainer>\n      )\n    }\n\n    return (\n      <div>\n        <FormattedMessage id={'settings.appearance.theme'}>\n          {text =>\n            <PreferenceGroup title={text}>\n              <PreferenceItem>\n                <div style={{ width: '100%' }}>\n                  {themeBlock('settings.appearance.theme.white', 'white')}\n                  {themeBlock('settings.appearance.theme.light', 'light')}\n                  {themeBlock('settings.appearance.theme.dark', 'dark')}\n                  {themeBlock('settings.appearance.theme.black', 'black')}\n                  {themeBlock('settings.appearance.theme.chrome-dark', 'chrome-dark')}\n                </div>\n              </PreferenceItem>\n            </PreferenceGroup>\n          }\n        </FormattedMessage>\n      </div>\n    )\n  }\n}\n\nexport default AppearanceTab\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { FormattedMessage } from 'react-intl'\nimport { AnyAction } from 'redux'\n\ninterface Props {\n  theme: string,\n  language: string,\n\n  updateLanguage(theme: string): AnyAction\n}\n\nexport default class LanguageTab extends Component<Props> {\n  onSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLanguage(e.target.value)\n  }\n\n  render() {\n    const scheme = getTheme(this.props.theme)\n    return (\n      <PreferenceGroup titleId={'settings.language'}>\n        <PreferenceItem>\n          <select\n            className={'setting-select'}\n            style={{\n              backgroundColor: scheme.primary,\n              color: scheme.textPrimary,\n            }}\n            value={this.props.language}\n            onChange={this.onSelect}>\n            <FormattedMessage id={'settings.language.default'}>\n              {text => <option value=''>{text}</option>}\n            </FormattedMessage>\n            <option value='zh-Hans'>简体中文</option>\n            <option value='zh-Hant'>正體中文</option>\n            <option value='en-US'>English</option>\n          </select>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport packageJson from '../../../package.json'\n\ninterface Props {\n  theme: string\n}\n\nexport default class AboutTab extends Component<Props> {\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n    const about = <FormattedMessage id={'settings.about'}>\n      {text =>\n        <PreferenceGroup title={text}>\n          <PreferenceItem>\n            <div><span role={'img'} aria-label={'logo'}>💼</span> Version {packageJson.version}\n            </div>\n          </PreferenceItem>\n          <PreferenceItem>\n            <div>\n              <a href={'https://github.com/sorcererXW/iloveworks'}\n                 target={'_blank'}\n                 rel={'noopener noreferrer'}\n                 style={{\n                   fontWeight: 'bold',\n                   color: scheme.accent,\n                 }}>\n                Github\n              </a>\n            </div>\n          </PreferenceItem>\n          <PreferenceItem>\n            <div>\n              <a href={'https://github.com/sorcererXW/iloveworks/releases'}\n                 target={'_blank'}\n                 rel={'noopener noreferrer'}\n                 style={{\n                   fontWeight: 'bold',\n                   color: scheme.accent,\n                 }}>\n                <FormattedMessage id={'settings.about.release_note'}/>\n              </a>\n            </div>\n          </PreferenceItem>\n        </PreferenceGroup>\n      }\n    </FormattedMessage>\n\n    return (\n      <div>\n        {about}\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { InjectedIntl, defineMessages, FormattedMessage } from 'react-intl'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { MdArrowDropDown, MdArrowDropUp } from 'react-icons/md'\nimport ReactMarkdown from 'react-markdown'\nimport { AnyAction } from 'redux'\nimport { TextareaAutosize } from 'react-autosize-textarea/lib/TextareaAutosize'\n\ninterface Props {\n  theme: string\n  interval: number\n  slogan?: string\n  intl: InjectedIntl\n\n  updateSlogan(theme: string): AnyAction\n\n  updateInterval(theme: number): AnyAction\n}\n\ninterface State {\n  text: string,\n  showSyntax: boolean,\n}\n\nexport default class SloganTab extends Component<Props, State> {\n  state = {\n    text: '',\n    showSyntax: false,\n  }\n\n  messages = defineMessages({\n    saveSuccess: {\n      id: 'action.save.success',\n    },\n  })\n\n  componentDidMount() {\n    this.setSlogan()\n  }\n\n  setSlogan = () => {\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      this.setState({\n        text: intl.formatMessage(messages.defaultSlogan),\n      })\n    } else {\n      this.setState({\n        text: this.props.slogan,\n      })\n    }\n  }\n\n  // @ts-ignore\n  onTextChange = e => {\n    const text = e.target.value\n    if (text === undefined) {\n      this.setState({ text: '' })\n    } else {\n      this.setState({ text })\n    }\n  }\n\n  onSave = () => {\n    this.props.updateSlogan(this.state.text)\n    alert(this.props.intl.formatMessage(this.messages.saveSuccess))\n    this.setSlogan()\n  }\n\n  onReset = () => {\n    this.props.updateSlogan('')\n    this.setSlogan()\n  }\n\n  onSyntaxArrowClick = () => {\n    this.setState({ showSyntax: !this.state.showSyntax })\n  }\n\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n\n    const customTab = (\n      <PreferenceGroup titleId={'settings.slogan.custom'}>\n        <PreferenceItem>\n          <div>\n            <TextareaAutosize\n              onChange={this.onTextChange}\n              value={this.state.text}\n              className={'slogan-textarea'}\n              spellCheck={false}\n              style={{\n                backgroundColor: scheme.primary,\n                color: scheme.textPrimary,\n              }}\n            />\n            <div style={{\n              paddingRight: 16,\n              paddingLeft: 16,\n              userSelect: 'none',\n              color: scheme.textSecondary,\n              fontSize: '0.8rem',\n            }}>\n              <div\n                onClick={this.onSyntaxArrowClick}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}>\n                <FormattedMessage id={'settings.slogan.syntax'}/>\n                {\n                  this.state.showSyntax ?\n                    <MdArrowDropUp style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}/>\n                    : <MdArrowDropDown style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}/>\n                }\n              </div>\n              {this.state.showSyntax ?\n                <div>\n                  <FormattedMessage id={'settings.slogan.syntax.summary'}>\n                    {\n                      text => {\n                        if (typeof text !== 'string') {\n                          return null\n                        }\n                        return <ReactMarkdown\n                          renderers={{ paragraph: 'div' }}\n                          source={text}/>\n                      }\n                    }\n                  </FormattedMessage>\n                </div> : undefined\n              }\n            </div>\n          </div>\n          <div style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n          }}>\n            <div style={{ flex: 1 }}/>\n            <div className={'button-bar'}>\n              <button onClick={this.onReset}\n                      style={{\n                        backgroundColor: scheme.primary,\n                        color: scheme.textPrimary,\n                      }}>\n                <FormattedMessage id={'action.reset'}/>\n              </button>\n              <button onClick={this.onSave}\n                      style={{\n                        backgroundColor: scheme.primary,\n                        color: scheme.textPrimary,\n                      }}>\n                <FormattedMessage id={'action.save'}/>\n              </button>\n            </div>\n          </div>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n\n    return (\n      <div>\n        {customTab}\n      </div>\n    )\n  }\n}\n","import Responsive from 'react-responsive'\nimport React from 'react'\n\nexport const Mobile = (props: any) => <Responsive {...props} maxWidth={425}/>\nexport const Tablet = (props: any) => <Responsive {...props} minWidth={426} maxWidth={768}/>\nexport const Default = (props: any) => <Responsive {...props} minWidth={769}/>\n","import React, { Component } from 'react'\nimport './settingsPage.css'\nimport {\n  Link,\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n  RouteComponentProps,\n  match as Match,\n} from 'react-router-dom'\nimport { FormattedMessage, injectIntl } from 'react-intl'\nimport { connect } from 'react-redux'\nimport {\n  updateLanguage,\n  updateTheme,\n  updateSlogan,\n} from '../redux/actions/settingsAction'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { Helmet } from 'react-helmet'\nimport { MdClose, MdMoreVert } from 'react-icons/md'\nimport { AppearanceTab, AboutTab, SloganTab, LanguageTab } from './tabs'\nimport styled from 'styled-components'\nimport { Dispatch } from 'redux'\nimport AppHeader from '../components/appHeader'\nimport { Default, Mobile, Tablet } from '../components/responsive'\n\nconst Root = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n`\n\nconst Sider = styled.div`\n  padding: 16px;\n  border: 0 solid;\n  border-right-width: 1px;\n  height: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .selected {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    box-sizing: border-box;\n    border-right-width: 0;\n    flex-direction: row;\n    width: 100%;\n    height: auto;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n        width: 0 !important;\n    }\n  }\n`\n\nconst NavItem = styled.div`\n  text-decoration: none;\n  padding: 8px 32px 8px 16px;\n  margin-bottom: 16px;\n  margin-right: 8px;\n  font-size: 1rem;\n  white-space: pre;\n  font-weight: 500;\n\n  :hover {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    padding: 8px 16px 8px 16px;\n    margin-right: 8px;\n  }\n`\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  padding: 0 16px;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n`\n\ninterface Props {\n  theme: string\n}\n\nconst mapStateToProps = (state: any) => ({\n  language: state.settings.language,\n  theme: state.settings.theme,\n  slogan: state.settings.slogan,\n  interval: state.settings.interval,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  updateLanguage: (language: string) => dispatch(updateLanguage(language)),\n  updateTheme: (theme: string) => dispatch(updateTheme(theme)),\n  updateSlogan: (slogan: string) => dispatch(updateSlogan(slogan)),\n})\n\nclass SettingsPage extends Component<RouteComponentProps & Props> {\n  state = {\n    showMenu: true,\n  }\n\n  render() {\n    const { match, theme } = this.props\n    const palette = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id='settings'>\n        {name =>\n          <Helmet>\n            <title>{name}</title>\n          </Helmet>\n        }\n      </FormattedMessage>\n    )\n\n    const renderRedirect = ((m: Match<any>) =>\n        () => <Redirect to={`${m.url}/appearance`}/>\n    )(match)\n\n    const content = (\n      <ContentContainer>\n        <Switch>\n          <Route exact path={`${match.url}/slogan`}\n                 component={connect(mapStateToProps, mapDispatchToProps)(injectIntl(SloganTab))}/>\n          <Route exact path={`${match.url}/language`}\n                 component={connect(mapStateToProps, mapDispatchToProps)(LanguageTab)}/>\n          <Route exact path={`${match.url}/appearance`}\n                 component={connect(mapStateToProps, mapDispatchToProps)(AppearanceTab)}/>\n          <Route exact path={`${match.url}/about`}\n                 component={connect(mapStateToProps, mapDispatchToProps)(AboutTab)}/>\n          <Route render={renderRedirect}/>\n        </Switch>\n      </ContentContainer>\n    )\n\n    const links = ['appearance', 'slogan', 'language', 'about']\n\n    const closeIcon = (\n      <Link to={'/'}>\n        <MdClose style={{\n          color: palette.textPrimary,\n          fontSize: '2em',\n          verticalAlign: 'middle',\n        }}/>\n      </Link>\n    )\n\n    const moreIcon = (\n      <MdMoreVert\n        style={{\n          color: palette.textPrimary,\n          fontSize: '2em',\n          verticalAlign: 'middle',\n        }}\n        onClick={\n          (\n            (page, showMenu) => () => page.setState({ showMenu })\n          )(this, !this.state.showMenu)\n        }/>\n    )\n\n    return (\n      <Root style={{\n        backgroundColor: palette.background,\n        color: palette.textPrimary,\n      }}>\n        {meta}\n        <FormattedMessage id='settings'>\n          {title => [\n            <Default key={0}><AppHeader title={title} rightExtra={closeIcon}/></Default>,\n            <Tablet key={1}><AppHeader title={title} leftExtra={closeIcon}/></Tablet>,\n            <Mobile key={2}><AppHeader title={title} leftExtra={closeIcon}\n                                       rightExtra={moreIcon}/></Mobile>,\n          ]}\n        </FormattedMessage>\n        <Default>\n          <main style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n          }}>\n            <Sider\n              style={{\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\n              }}>\n              {\n                links.map((link, key) => (\n                  <NavLink\n                    key={key}\n                    activeClassName={'selected'}\n                    activeStyle={{ color: palette.textPrimary }}\n                    style={{ color: palette.textSecondary }}\n                    to={`${match.url}/${link}`}>\n                    <NavItem>\n                      <FormattedMessage id={`settings.${link}`}/>\n                    </NavItem>\n                  </NavLink>\n                ))\n              }\n            </Sider>\n            {content}\n          </main>\n        </Default>\n        <Tablet>\n          <main style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}>\n            <Sider\n              style={{\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\n              }}>\n              {\n                links.map((link, key) => (\n                  <NavLink\n                    key={key}\n                    activeClassName={'selected'}\n                    activeStyle={{ color: palette.textPrimary }}\n                    style={{ color: palette.textSecondary }}\n                    to={`${match.url}/${link}`}>\n                    <NavItem>\n                      <FormattedMessage id={`settings.${link}`}/>\n                    </NavItem>\n                  </NavLink>\n                ))\n              }\n            </Sider>\n            {content}\n          </main>\n        </Tablet>\n        <Mobile>\n          <main style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}>\n            {\n              this.state.showMenu ?\n                <Sider\n                  style={{\n                    borderColor: hexToRgbA(palette.textSecondary, 0.2),\n                    width: '100%',\n                    display: 'flex',\n                    flexDirection: 'column',\n                  }}>\n                  {\n                    links.map((link, key) => (\n                      <NavLink\n                        key={key}\n                        activeClassName={'selected'}\n                        activeStyle={{ color: palette.textPrimary }}\n                        style={{ color: palette.textSecondary }}\n                        to={`${match.url}/${link}`}>\n                        <NavItem>\n                          <FormattedMessage id={`settings.${link}`}/>\n                        </NavItem>\n                      </NavLink>\n                    ))\n                  }\n                </Sider> : undefined\n            }\n            {content}\n          </main>\n        </Mobile>\n      </Root>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage)\n","import I18n from './i18n'\n\nexport default {\n  appName: '我爱工作',\n\n  'slogan.default': `**优秀**|是一种习惯\n**优秀**|是与生俱来的天赋\n**我爱工作**\n我徜徉在工作的海洋里\n上司叫我吃饭|我充耳不闻\n同事喊我喝水|我无动于衷\n老板喊我睡觉|我百般推辞`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '设置',\n  'settings.application': '应用程序',\n  'settings.appearance': '界面',\n  'settings.language': '语言',\n  'settings.language.default': '跟随系统',\n  'settings.about': '关于',\n  'settings.slogan': '标语',\n  'settings.slogan.syntax': '语法说明',\n  'settings.slogan.syntax.summary': `一行语句为一段，使用 | 进行段内分行\n另外支持使用部分简单的 Markdown 语法：\n\\`**加粗**\\` ⇨ **加粗**\n\\`*斜体*\\` ⇨ *斜体*\n\\`~~删除~~\\` ⇨ ~~删除~~`,\n  'settings.slogan.custom': '自定义标语',\n  'settings.slogan.interval': '时间间隔',\n  'settings.about.release_note': '更新日志',\n  'settings.appearance.theme': '主题',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: '我愛工作',\n\n  'slogan.default': `**優秀**|是一種習慣\n**優秀**|是與生俱來的天賦\n**我愛工作**\n工作使我快樂\n我徜徉在工作的海洋裡\n上司叫我吃飯|我充耳不聞\n同事喊我喝水|我無動於衷\n老闆喊我睡覺|我百般推辭`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '設置',\n  'settings.application': '應用程序',\n  'settings.appearance': '界面',\n  'settings.language': '語言',\n  'settings.language.default': '跟隨系統',\n  'settings.about': '關於',\n  'settings.slogan': '標語',\n  'settings.slogan.syntax': '語法說明',\n  'settings.slogan.syntax.summary': `一行語句為一段，使用 | 進行段內分行\n另外支持使用部分簡單的 Markdown 語法：\n\\`**加粗**\\` ⇨ **加粗**\n\\`*斜體*\\` ⇨ *斜體*\n\\`~~刪除~~\\` ⇨ ~~刪除~~`,\n  'settings.slogan.custom': '自定義標語',\n  'settings.slogan.interval': '時間間隔',\n  'settings.about.release_note': '更新日誌',\n  'settings.appearance.theme': '主題',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: 'I ❤ Works',\n\n  'slogan.default': `**Excellent**| is a habit\n**Excellent**| is a gift\n**I love working**\nWorking makes me happy\nI am in the ocean of work\nBoss told me to have lunch | I turn a deaf ear\nColleagues call me to drink | I am indifferent\nManager call me to sleep | I refuse strongly`,\n  'action.ok': 'OK',\n  'action.save': 'Save',\n  'action.save.success': 'Saved successfully',\n  'action.cancel': 'Cancel',\n  'action.reset': 'Reset',\n\n  settings: 'Settings',\n  'settings.application': 'Application',\n  'settings.appearance': 'Appearance',\n  'settings.language': 'Language',\n  'settings.language.default': 'Default',\n  'settings.about': 'About',\n  'settings.slogan': 'Slogan',\n  'settings.slogan.syntax': 'Syntax description',\n  'settings.slogan.syntax.summary': `\nOne line statement is a paragraph, use \\'|\\' to perform line break\nAnd you can use some basic Markdown inline syntax:\n\\`**Bold**\\` ⇨ **Bold**\n\\`*Italic*\\` ⇨ *Italic*\n\\`~~Delete~~\\` ⇨ ~~Delete~~`,\n  'settings.slogan.custom': 'Custom slogan',\n  'settings.slogan.interval': 'Interval',\n  'settings.about.release_note': 'Release Notes',\n  'settings.appearance.theme': 'Theme',\n  'settings.appearance.theme.white': 'White',\n  'settings.appearance.theme.black': 'Black',\n  'settings.appearance.theme.light': 'Light',\n  'settings.appearance.theme.dark': 'Dark',\n  'settings.appearance.theme.chrome-dark': 'Chrome Dark',\n} as I18n\n","import zhHans from './zhHans'\nimport zhHant from './zhHant'\nimport enUS from './enUS'\nimport I18n from './i18n'\n\nexport function getLocale(language: string): I18n {\n  let target = language\n  if (!target) {\n    // @ts-ignore\n    target = navigator.userLanguage || navigator.language\n  }\n  switch (target.toLocaleLowerCase()) {\n    case 'zh':\n    case 'zh-hans':\n    case 'zh-cn':\n      return zhHans\n    case 'zh-hk':\n    case 'zh-tw':\n    case 'zh-mo':\n    case 'zh-sg':\n    case 'zh-hant':\n      return zhHant\n    default:\n      return enUS\n  }\n}\n","import React, { Component } from 'react'\n\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport HomePage from './containers/homePage'\nimport SettingsPage from './containers/settingsPage'\n\nimport { connect } from 'react-redux'\n\nimport { getLocale } from './locale'\n\nimport { addLocaleData, FormattedMessage, IntlProvider } from 'react-intl'\nimport zh from 'react-intl/locale-data/zh'\nimport en from 'react-intl/locale-data/en'\nimport { Helmet } from 'react-helmet'\n\nimport { getTheme } from './theme'\nimport { getQueryParamsFromUrl } from './utils/urlUtil'\n\naddLocaleData([...en, ...zh])\n\ninterface Props {\n  theme: string\n  language: string\n}\n\nclass App extends Component<Props> {\n  render() {\n    const theme = this.props.theme\n    const scheme = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id={'appName'}>\n        {appName =>\n          <Helmet>\n            <meta charSet='utf-8'/>\n            <title>{appName}</title>\n            <meta name='theme-color' content={scheme.background}/>\n          </Helmet>\n        }\n      </FormattedMessage>\n    )\n\n    const route = (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={'/'} component={HomePage}/>\n          <Route path={'/settings'} component={SettingsPage}/>\n          <Route render={(() => () => <Redirect to={'/'}/>)()}/>\n        </Switch>\n      </BrowserRouter>\n    )\n\n    return (\n      <IntlProvider locale={navigator.language} messages={getLocale(this.props.language)}>\n        <div>\n          {meta}\n          {route}\n        </div>\n      </IntlProvider>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    language: getQueryParamsFromUrl('lang') || state.settings.language,\n    theme: state.settings.theme,\n  }\n}\n\nexport default connect(mapStateToProps, null)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n  ),\n)\n\ntype Config = {\n  onSuccess?(registration: ServiceWorkerRegistration): void;\n  onUpdate?(registration: ServiceWorkerRegistration): void;\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as types from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nconst initialState = {}\n\nexport function SettingsReducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case types.UPDATE_LANGUAGE:\n      return {\n        ...state,\n        language: action.language,\n      }\n    case types.UPDATE_THEME:\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    case types.UPDATE_SLOGAN:\n      return {\n        ...state,\n        slogan: action.slogan,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { SettingsReducer } from './settingsReducer'\n\nconst rootReducer = combineReducers({\n  settings: SettingsReducer,\n})\n\nexport default rootReducer\n","import { applyMiddleware, createStore } from 'redux'\nimport * as actionCreators from './actions/settingsAction'\nimport logger from 'redux-logger'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from './reducers/index'\n\nconst middlewares = [logger]\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\n\nconst enhancer = window.__REDUX_DEVTOOLS_EXTENSION__\n  && window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators })\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore() {\n  return createStoreWithMiddleware(persistedReducer, enhancer)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as ServiceWorker from './utils/registerServiceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistStore(store)}>\n      <App/>\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'))\n\nServiceWorker.register()\n"],"sourceRoot":""}