{"version":3,"sources":["theme/themes.ts","theme/index.ts","components/appHeader.tsx","utils/urlUtil.ts","components/displaySlogan.tsx","components/typingText.tsx","containers/homePage.tsx","redux/actionTypes.ts","redux/actions/settingsAction.ts","utils/colorUtil.ts","components/preferenceGroup.tsx","components/preferenceItem.tsx","containers/tabs/appearanceTab.tsx","containers/tabs/languageTab.tsx","containers/tabs/aboutTab.tsx","containers/tabs/sloganTab.tsx","components/responsive.tsx","containers/settingsPage.tsx","locale/zhHans.ts","locale/zhHant.ts","locale/enUS.ts","locale/index.ts","app.tsx","utils/registerServiceWorker.ts","redux/reducers/settingsReducer.ts","redux/reducers/index.ts","redux/configureStore.ts","index.tsx"],"names":["White","primary","primaryDark","background","accent","textPrimary","textSecondary","Light","Dark","Black","ChromeDark","getTheme","theme","toLowerCase","Container","styled","div","_templateObject","Title","h1","_templateObject2","AppHeader","_this$props","this","props","title","leftExtra","rightExtra","react_default","a","createElement","style","Object","objectSpread","width","undefined","marginRight","flex","marginLeft","Component","getQueryParamsFromUrl","query","URLSearchParams","window","location","search","get","DisplaySlogan","split","displayText","display","i","length","push","key","react_markdown_default","renderers","paragraph","allowedTypes","source","React","TypingText","targetText","index","timer","state","updateIndex","slogan","_this","setState","text","startsWith","slice","console","log","target","setTimeout","interval","clearTimeout","userSelect","textAlign","fontSize","color","fontColor","displaySlogan","defaultProps","Root","homePage_templateObject","HomePage","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getSlogan","trim","messages","defineMessages","defaultSlogan","id","intl","formatMessage","map","item","filter","mouseCountdown","handleMouseMove","idle","palette","settingsIcon","react_router_dom","to","index_esm","cursor","alignItems","justifyContent","onMouseMove","react_addons_css_transition_group_default","transitionLeaveTimeout","transitionEnterTimeout","transitionName","appHeader","position","top","boxSizing","height","typingText","connect","replace","language","settings","injectIntl","UPDATE_LANGUAGE","UPDATE_THEME","UPDATE_SLOGAN","updateLanguage","type","updateTheme","updateSlogan","hexToRgbA","hex","alpha","arguments","test","c","substring","uc","parseInt","join","concat","Error","preferenceGroup_templateObject","PreferenceGroup","titleId","children","index_es","preferenceGroup_Title","preferenceItem_templateObject","PreferenceItem","actionView","itemView","preferenceItem_Container","borderColor","ThemeBlockContainer","appearanceTab_templateObject","ThemeBlockSelection","appearanceTab_templateObject2","AppearanceTab","scheme","themeBlock","value","onClick","handle","v","backgroundColor","preferenceGroup_PreferenceGroup","preferenceItem_PreferenceItem","Select","select","languageTab_templateObject","LanguageTab","onSelect","e","onChange","AboutTab","about","role","aria-label","packageJson","version","href","rel","fontWeight","SloganTextarea","TextareaAutosize","sloganTab_templateObject","ButtonBar","sloganTab_templateObject2","SloganTab","showSyntax","saveSuccess","setSlogan","onTextChange","onSave","alert","onReset","onSyntaxArrowClick","customTab","spellCheck","paddingRight","paddingLeft","verticalAlign","flexDirection","className","Mobile","react_responsive_default","assign","maxWidth","Tablet","minWidth","Default","settingsPage_templateObject","Sider","settingsPage_templateObject2","NavItem","NavLink","_templateObject3","ContentContainer","_templateObject4","mapStateToProps","mapDispatchToProps","dispatch","SettingsPage","showMenu","m","page","match","meta","name","Helmet","renderRedirect","react_router","url","content","exact","path","component","render","closeIcon","moreIcon","navItems","link","activeClassName","activeStyle","desktopView","responsive_Default","tabletView","responsive_Tablet","mobileView","responsive_Mobile","settingsPage_Root","zhHans","appName","slogan.default","action.ok","action.save","action.save.success","action.cancel","action.reset","settings.application","settings.appearance","settings.language","settings.language.default","settings.about","settings.slogan","settings.slogan.syntax","settings.slogan.syntax.summary","settings.slogan.custom","settings.slogan.interval","settings.about.release_note","settings.appearance.theme","settings.appearance.theme.white","settings.appearance.theme.black","settings.appearance.theme.light","settings.appearance.theme.dark","settings.appearance.theme.chrome-dark","zhHant","enUS","getLocale","navigator","userLanguage","toLocaleLowerCase","addLocaleData","toConsumableArray","en","zh","App","charSet","route","locale","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","initialState","rootReducer","combineReducers","action","types","middlewares","logger","createStoreWithMiddleware","applyMiddleware","apply","createStore","enhancer","__REDUX_DEVTOOLS_EXTENSION__","actionCreators","persistConfig","storage","persistedReducer","persistReducer","store","ReactDOM","es","integration_react","persistor","persistStore","app","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker","ServiceWorker"],"mappings":"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","file":"static/js/main.7bec9b51.chunk.js","sourcesContent":["import { Theme } from './index'\n\nexport const White = {\n  primary: '#fff',\n  primaryDark: '#fff',\n  background: '#fff',\n  accent: '#000',\n  textPrimary: '#000',\n  textSecondary: '#757575',\n} as Theme\n\nexport const Light = {\n  primary: '#fefefe',\n  primaryDark: '#f5f5f5',\n  background: '#F5F5F5',\n  accent: '#000',\n  textPrimary: '#212121',\n  textSecondary: '#9E9E9E',\n} as Theme\n\nexport const Dark = {\n  primary: '#323639',\n  primaryDark: '#282c2f',\n  background: '#303030',\n  accent: '#fff',\n  textPrimary: '#fafafa',\n  textSecondary: '#d6d6d6',\n} as Theme\n\nexport const Black = {\n  primary: '#1c2226',\n  primaryDark: '#1b2024',\n  background: '#000',\n  accent: '#fff',\n  textPrimary: '#fff',\n  textSecondary: '#a0a0a1',\n} as Theme\n\nexport const ChromeDark = {\n  primary: '#333639',\n  primaryDark: '#292c2f',\n  background: '#202124',\n  accent: '#fff',\n  textPrimary: '#f1f3f4',\n  textSecondary: '#9ba0a5',\n} as Theme\n","import { Black, Dark, White, Light, ChromeDark } from './themes'\nimport { ColorProperty } from 'csstype'\n\nexport interface Theme {\n  primary: ColorProperty\n  primaryDark: ColorProperty\n  background: ColorProperty\n  accent: ColorProperty\n  textPrimary: ColorProperty\n  textSecondary: ColorProperty\n}\n\nexport function getTheme(theme?: string): Theme {\n  switch (theme ? theme.toLowerCase() : '') {\n    case 'light':\n      return Light\n    case 'dark':\n      return Dark\n    case 'white':\n      return White\n    case 'black':\n      return Black\n    case 'chrome-dark':\n      return ChromeDark\n    default:\n      return Light\n  }\n}\n","import React, { Component, CSSProperties, ReactNode } from 'react'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  box-sizing: border-box;\n  height: 64px;\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  padding: 48px 16px;\n`\n\nconst Title = styled.h1`\n  padding: 0;\n  margin: 0;\n`\n\nclass AppHeader extends Component<{\n  title?: string | JSX.Element\n  rightExtra?: ReactNode\n  leftExtra?: ReactNode\n  style?: CSSProperties\n}> {\n  render() {\n    const { title, leftExtra, rightExtra } = this.props\n    return (\n      <header\n        style={{\n          width: '100%',\n          ...this.props.style,\n        }}\n      >\n        <Container>\n          {leftExtra === undefined ? undefined : <div style={{ marginRight: 16 }}>{leftExtra}</div>}\n          <Title>{title}</Title>\n          <div style={{ flex: 1 }} />\n          {rightExtra === undefined ? (\n            undefined\n          ) : (\n            <div style={{ marginLeft: 16 }}>{rightExtra}</div>\n          )}\n        </Container>\n      </header>\n    )\n  }\n}\n\nexport default AppHeader\n","export const getQueryParamsFromUrl = (query: string): string | null => {\n  return new URLSearchParams(window.location.search).get(query)\n}\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nclass DisplaySlogan extends React.Component<{\n  displayText: string\n}> {\n  render():\n    | React.ReactElement<any, string | React.JSXElementConstructor<any>>\n    | string\n    | number\n    | {}\n    | React.ReactNodeArray\n    | React.ReactPortal\n    | boolean\n    | null\n    | undefined {\n    const split = this.props.displayText ? this.props.displayText.split('|') : []\n    const display = []\n    for (let i = 0; i < split.length; i++) {\n      if (i > 0) {\n        display.push(<br key={i * 2 - 1} />)\n      }\n      display.push(\n        <ReactMarkdown\n          key={i * 2}\n          renderers={{ paragraph: 'span' }}\n          allowedTypes={[\n            'root',\n            'paragraph',\n            'emphasis',\n            'strong',\n            'delete',\n            'link',\n            'linkReference',\n            'text',\n          ]}\n          source={split[i]}\n        />,\n      )\n    }\n    return <div>{display}</div>\n  }\n}\n\nexport default DisplaySlogan\n","import React, { Component } from 'react'\nimport { ColorProperty, TextAlignProperty } from 'csstype'\nimport DisplaySlogan from './displaySlogan'\n\ninterface Props {\n  slogan?: string[]\n  interval: number\n  fontColor: ColorProperty\n  fontSize: number\n  textAlign: TextAlignProperty\n}\n\nclass TypingText extends Component<Props> {\n  static defaultProps = {\n    fontSize: 64,\n    fontColor: '#000',\n    textAlign: 'left',\n    slogan: [],\n    interval: 3,\n  }\n\n  targetText = ''\n  index = 0\n  timer: number | undefined = undefined\n\n  state = {\n    displayText: '',\n  }\n\n  updateIndex = () => {\n    const slogan = this.props.slogan\n    if (slogan === undefined) {\n      this.setState({\n        displayText: '',\n      })\n      this.targetText = ''\n      return\n    }\n    if (this.state.displayText === this.targetText) {\n      if (this.targetText.length > 0) {\n        this.targetText = ''\n      } else {\n        this.targetText = slogan[this.index++ % slogan.length]\n      }\n    }\n\n    let text = this.state.displayText\n    if (this.targetText.length > text.length && this.targetText.startsWith(text)) {\n      text = this.targetText.slice(0, text.length + 1)\n    } else {\n      text = text.slice(0, text.length - 1)\n    }\n\n    this.setState({\n      displayText: text,\n    })\n    console.log({\n      display: this.state.displayText,\n      target: this.targetText,\n    })\n\n    if (this.targetText === text) {\n      this.timer = setTimeout(\n        () => this.updateIndex(),\n        this.props.interval * 1000,\n      )\n      console.log('wait more')\n    } else {\n      this.timer = setTimeout(\n        () => this.updateIndex(),\n        this.props.interval * 200 * 0.2,\n      )\n    }\n  }\n\n  componentDidMount() {\n    this.updateIndex()\n  }\n\n  componentWillUnmount() {\n    if (this.timer !== undefined) {\n      clearTimeout(this.timer)\n    }\n  }\n\n  render() {\n    return (\n      <div\n        style={{\n          userSelect: 'none',\n          textAlign: this.props.textAlign,\n          fontSize: this.props.fontSize,\n          color: this.props.fontColor,\n        }}\n      >\n        <DisplaySlogan displayText={this.state.displayText}/>\n      </div>\n    )\n  }\n}\n\nexport default TypingText\n","import React, { Component } from 'react'\nimport './homePage.css'\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport { getTheme } from '../theme'\nimport { defineMessages, InjectedIntl, injectIntl } from 'react-intl'\nimport AppHeader from '../components/appHeader'\nimport ReactCSSTransitionGroup from 'react-addons-css-transition-group'\nimport { MdSettings } from 'react-icons/md'\nimport styled from 'styled-components'\nimport { getQueryParamsFromUrl } from '../utils/urlUtil'\nimport TypingText from '../components/typingText'\n\nconst Root = styled.div`\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n\n  @media (max-width: 768px) {\n    padding-top: 0;\n    padding-left: 0;\n    padding-right: 0;\n  }\n`\n\ninterface Props {\n  slogan: string\n  intl: InjectedIntl\n  theme: string\n}\n\ninterface State {\n  idle: boolean\n}\n\nclass HomePage extends Component<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      idle: true,\n    }\n  }\n\n  getSlogan = (): string[] => {\n    let slogan = this.props.slogan\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      slogan = intl.formatMessage(messages.defaultSlogan)\n    }\n\n    return slogan\n      .split('\\n')\n      .map(item => item.trim())\n      .filter(item => item.length > 0)\n  }\n\n  mouseCountdown: number | undefined = undefined\n\n  handleMouseMove = () => {\n    if (this.state.idle) {\n      this.setState({\n        idle: false,\n      })\n    }\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n    this.mouseCountdown = window.setTimeout(\n      () =>\n        this.setState({\n          idle: true,\n        }),\n      2000,\n    )\n  }\n\n  componentWillUnmount() {\n    if (this.mouseCountdown !== undefined) {\n      window.clearTimeout(this.mouseCountdown)\n      this.mouseCountdown = undefined\n    }\n  }\n\n  render() {\n    const palette = getTheme(this.props.theme)\n\n    const settingsIcon = (\n      <Link to={'/settings'}>\n        <h1>\n          <MdSettings\n            style={{\n              color: palette.textSecondary,\n              cursor: 'pointer',\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          />\n        </h1>\n      </Link>\n    )\n    return (\n      <Root\n        style={{\n          background: palette.background,\n          cursor: this.state.idle ? 'none' : 'default',\n        }}\n        onMouseMove={this.handleMouseMove}\n      >\n        <ReactCSSTransitionGroup\n          transitionLeaveTimeout={500}\n          transitionEnterTimeout={300}\n          transitionName='fade'\n        >\n          {this.state.idle ? (\n            undefined\n          ) : (\n            <AppHeader style={{ position: 'absolute', top: 0 }} rightExtra={settingsIcon}/>\n          )}\n        </ReactCSSTransitionGroup>\n        <main\n          style={{\n            boxSizing: 'border-box',\n            height: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <TypingText\n            textAlign={'center'}\n            fontColor={palette.textPrimary}\n            fontSize={72}\n            slogan={this.getSlogan()}\n          />\n        </main>\n      </Root>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  let slogan = getQueryParamsFromUrl('slogan')\n  if (slogan) {\n    slogan = slogan.replace('||', '\\n')\n  }\n\n  return {\n    language: state.settings.language,\n    theme: getQueryParamsFromUrl('theme') || state.settings.theme,\n    slogan: slogan || state.settings.slogan,\n  }\n}\n\nexport default connect(mapStateToProps)(injectIntl(HomePage))\n","export const UPDATE_LANGUAGE = 'UPDATE_LANGUAGE'\n\nexport const UPDATE_THEME = 'UPDATE_THEME'\n\nexport const UPDATE_SLOGAN = 'UPDATE_SLOGAN'\n","import { UPDATE_LANGUAGE, UPDATE_SLOGAN, UPDATE_THEME } from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nexport const updateLanguage = (language: string): AnyAction => ({\n  type: UPDATE_LANGUAGE,\n  language,\n})\n\nexport const updateTheme = (theme: string): AnyAction => ({\n  type: UPDATE_THEME,\n  theme,\n})\n\nexport const updateSlogan = (slogan: string): AnyAction => ({\n  type: UPDATE_SLOGAN,\n  slogan,\n})\n","export function hexToRgbA(hex: string, alpha = 1) {\n  if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n    let c = hex.substring(1).split('')\n    if (c.length === 3) {\n      c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n    }\n    const uc = parseInt('0x' + c.join(''), 16)\n\n    return `rgba(${[(uc >> 16) & 255, (uc >> 8) & 255, uc & 255].join(',')},${alpha})`\n  }\n  throw new Error('Bad Hex')\n}\n","import React, { Component } from 'react'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Title = styled.div`\n  padding: 16px 0;\n  font-weight: bold;\n  font-size: 1.5rem;\n`\n\nexport default class PreferenceGroup extends Component<{\n  title?: string | JSX.Element\n  titleId?: string\n}> {\n  render() {\n    const { title, titleId, children } = this.props\n\n    if (titleId !== undefined) {\n      return (\n        <div>\n          <FormattedMessage id={titleId}>{text => <Title>{text}</Title>}</FormattedMessage>\n          <div>{children}</div>\n        </div>\n      )\n    }\n    return (\n      <div>\n        <Title>{title}</Title>\n        <div>{children}</div>\n      </div>\n    )\n  }\n}\n","import React, { Component, ReactNode } from 'react'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  padding: 16px 0;\n  margin-bottom: 16px;\n  border: 0 solid;\n  border-bottom-width: 1px;\n`\n\ninterface Props {\n  title?: string\n  titleId?: string\n  actionView?: ReactNode\n  theme?: string\n}\n\nexport default class PreferenceItem extends Component<Props> {\n  render(): ReactNode {\n    const { title, titleId, actionView } = this.props\n    const itemView = (\n      <div style={{ display: 'flex' }}>\n        <div style={{ flex: 1 }}>\n          {titleId ? <FormattedMessage id={titleId} /> : <span>{title}</span>}\n        </div>\n        <div style={{ flex: 2 }}>\n          <div>{actionView}</div>\n        </div>\n      </div>\n    )\n\n    return (\n      <Container\n        style={{\n          borderColor: hexToRgbA(getTheme(this.props.theme).textSecondary, 0.2),\n        }}\n      >\n        {itemView}\n        {this.props.children}\n      </Container>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { hexToRgbA } from '../../utils/colorUtil'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport styled from 'styled-components'\nimport { AnyAction } from 'redux'\n\nconst ThemeBlockContainer = styled.div`\n  margin: 8px;\n  display: inline-block;\n  border: 1px solid;\n  border-radius: 8px;\n  padding: 16px 16px 14px;\n  user-select: none;\n  cursor: pointer;\n  font-size: 1rem;\n`\n\nconst ThemeBlockSelection = styled.div`\n  height: 2px;\n  margin-top: 2px;\n  border-width: 0;\n  border-radius: 2px;\n`\n\ninterface Props {\n  theme?: string\n\n  updateTheme(theme: string): AnyAction\n}\n\nclass AppearanceTab extends Component<Props> {\n  render() {\n    const { theme, updateTheme } = this.props\n    if (theme === undefined) {\n      updateTheme('light')\n    }\n    const scheme = getTheme(theme)\n    const themeBlock = (titleId: string, value: string) => {\n      return (\n        <ThemeBlockContainer\n          onClick={((handle, v) => () => handle(v))(updateTheme, value)}\n          style={{\n            borderColor: hexToRgbA(scheme.textSecondary, 0.2),\n            color: getTheme(value).textPrimary,\n            backgroundColor: getTheme(value).background,\n          }}\n        >\n          <FormattedMessage id={titleId} />\n          <ThemeBlockSelection\n            style={{\n              backgroundColor: value === theme ? scheme.accent : 'transparent',\n            }}\n          />\n        </ThemeBlockContainer>\n      )\n    }\n\n    return (\n      <div>\n        <FormattedMessage id={'settings.appearance.theme'}>\n          {text => (\n            <PreferenceGroup title={text}>\n              <PreferenceItem>\n                <div style={{ width: '100%' }}>\n                  {themeBlock('settings.appearance.theme.white', 'white')}\n                  {themeBlock('settings.appearance.theme.light', 'light')}\n                  {themeBlock('settings.appearance.theme.dark', 'dark')}\n                  {themeBlock('settings.appearance.theme.black', 'black')}\n                  {themeBlock('settings.appearance.theme.chrome-dark', 'chrome-dark')}\n                </div>\n              </PreferenceItem>\n            </PreferenceGroup>\n          )}\n        </FormattedMessage>\n      </div>\n    )\n  }\n}\n\nexport default AppearanceTab\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { FormattedMessage } from 'react-intl'\nimport { AnyAction } from 'redux'\nimport styled from 'styled-components'\n\nconst Select = styled.select`\n  font-size: 100%;\n  border-radius: 4px;\n  font-family: sans-serif;\n  line-height: 1.2rem;\n  align-items: center;\n  padding: 2px;\n  display: inline-block;\n  text-align: start;\n  height: auto;\n  border-color: rgb(169, 169, 169);\n\n  :focus {\n    outline-style: none;\n  }\n`\n\ninterface Props {\n  theme: string\n  language: string\n\n  updateLanguage(theme: string): AnyAction\n}\n\nexport default class LanguageTab extends Component<Props> {\n  onSelect = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.updateLanguage(e.target.value)\n  }\n\n  render() {\n    const scheme = getTheme(this.props.theme)\n    return (\n      <PreferenceGroup titleId={'settings.language'}>\n        <PreferenceItem>\n          <Select\n            style={{\n              backgroundColor: scheme.primary,\n              color: scheme.textPrimary,\n            }}\n            value={this.props.language}\n            onChange={this.onSelect}\n          >\n            <FormattedMessage id={'settings.language.default'}>\n              {text => <option value=''>{text}</option>}\n            </FormattedMessage>\n            <option value='zh-Hans'>简体中文</option>\n            <option value='zh-Hant'>正體中文</option>\n            <option value='en-US'>English</option>\n          </Select>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { getTheme } from '../../theme'\nimport { FormattedMessage } from 'react-intl'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport packageJson from '../../../package.json'\n\ninterface Props {\n  theme: string\n}\n\nexport default class AboutTab extends Component<Props> {\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n    const about = (\n      <FormattedMessage id={'settings.about'}>\n        {text => (\n          <PreferenceGroup title={text}>\n            <PreferenceItem>\n              <div>\n                <span role={'img'} aria-label={'logo'}>\n                  💼\n                </span>{' '}\n                Version {packageJson.version}\n              </div>\n            </PreferenceItem>\n            <PreferenceItem>\n              <div>\n                <a\n                  href={'https://github.com/sorcererXW/iloveworks'}\n                  target={'_blank'}\n                  rel={'noopener noreferrer'}\n                  style={{\n                    fontWeight: 'bold',\n                    color: scheme.accent,\n                  }}\n                >\n                  Github\n                </a>\n              </div>\n            </PreferenceItem>\n            <PreferenceItem>\n              <div>\n                <a\n                  href={'https://github.com/sorcererXW/iloveworks/releases'}\n                  target={'_blank'}\n                  rel={'noopener noreferrer'}\n                  style={{\n                    fontWeight: 'bold',\n                    color: scheme.accent,\n                  }}\n                >\n                  <FormattedMessage id={'settings.about.release_note'} />\n                </a>\n              </div>\n            </PreferenceItem>\n          </PreferenceGroup>\n        )}\n      </FormattedMessage>\n    )\n\n    return <div>{about}</div>\n  }\n}\n","import React, { Component } from 'react'\nimport { InjectedIntl, defineMessages, FormattedMessage } from 'react-intl'\nimport { getTheme } from '../../theme'\nimport PreferenceGroup from '../../components/preferenceGroup'\nimport PreferenceItem from '../../components/preferenceItem'\nimport { MdArrowDropDown, MdArrowDropUp } from 'react-icons/md'\nimport ReactMarkdown from 'react-markdown'\nimport { AnyAction } from 'redux'\nimport { TextareaAutosize } from 'react-autosize-textarea/lib/TextareaAutosize'\nimport styled from 'styled-components'\n\nconst SloganTextarea = styled(TextareaAutosize)`\n  font-size: 1.2rem;\n  border-radius: 8px;\n  width: 100%;\n  max-width: 100%;\n  box-sizing: border-box;\n  padding: 8px 16px;\n  line-height: 1.8rem;\n  min-height: 10rem;\n  resize: none;\n  overflow: hidden;\n\n  :focus {\n    outline-style: none;\n  }\n`\n\nconst ButtonBar = styled.div`\n  display: inline-block;\n  margin-top: 16px;\n  margin-bottom: 8px;\n\n  > button {\n    margin: 8px;\n    font-size: 1rem;\n    font-weight: 500;\n    padding: 8px 1rem;\n    border-radius: 4px;\n    border-color: rgba(0, 0, 0, 0);\n  }\n`\n\ninterface Props {\n  theme: string\n  interval: number\n  slogan?: string\n  intl: InjectedIntl\n\n  updateSlogan(theme: string): AnyAction\n\n  updateInterval(theme: number): AnyAction\n}\n\ninterface State {\n  text: string\n  showSyntax: boolean\n}\n\nexport default class SloganTab extends Component<Props, State> {\n  state = {\n    text: '',\n    showSyntax: false,\n  }\n\n  messages = defineMessages({\n    saveSuccess: {\n      id: 'action.save.success',\n    },\n  })\n\n  componentDidMount() {\n    this.setSlogan()\n  }\n\n  setSlogan = () => {\n    if (!this.props.slogan || this.props.slogan.trim().length === 0) {\n      const messages = defineMessages({\n        defaultSlogan: {\n          id: 'slogan.default',\n        },\n      })\n      const { intl } = this.props\n      this.setState({\n        text: intl.formatMessage(messages.defaultSlogan),\n      })\n    } else {\n      this.setState({\n        text: this.props.slogan,\n      })\n    }\n  }\n\n  // @ts-ignore\n  onTextChange = e => {\n    const text = e.target.value\n    if (text === undefined) {\n      this.setState({ text: '' })\n    } else {\n      this.setState({ text })\n    }\n  }\n\n  onSave = () => {\n    this.props.updateSlogan(this.state.text)\n    alert(this.props.intl.formatMessage(this.messages.saveSuccess))\n    this.setSlogan()\n  }\n\n  onReset = () => {\n    this.props.updateSlogan('')\n    this.setSlogan()\n  }\n\n  onSyntaxArrowClick = () => {\n    this.setState({ showSyntax: !this.state.showSyntax })\n  }\n\n  render() {\n    const { theme } = this.props\n    const scheme = getTheme(theme)\n\n    const customTab = (\n      <PreferenceGroup titleId={'settings.slogan.custom'}>\n        <PreferenceItem>\n          <div>\n            <SloganTextarea\n              onChange={this.onTextChange}\n              value={this.state.text}\n              spellCheck={false}\n              style={{\n                backgroundColor: scheme.primary,\n                color: scheme.textPrimary,\n              }}\n            />\n            <div\n              style={{\n                paddingRight: 16,\n                paddingLeft: 16,\n                userSelect: 'none',\n                color: scheme.textSecondary,\n                fontSize: '0.8rem',\n              }}\n            >\n              <div\n                onClick={this.onSyntaxArrowClick}\n                style={{\n                  display: 'flex',\n                  alignItems: 'center',\n                }}\n              >\n                <FormattedMessage id={'settings.slogan.syntax'} />\n                {this.state.showSyntax ? (\n                  <MdArrowDropUp\n                    style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}\n                  />\n                ) : (\n                  <MdArrowDropDown\n                    style={{\n                      verticalAlign: 'middle',\n                      marginLeft: 4,\n                      fontSize: '1rem',\n                    }}\n                  />\n                )}\n              </div>\n              {this.state.showSyntax ? (\n                <div>\n                  <FormattedMessage id={'settings.slogan.syntax.summary'}>\n                    {text => {\n                      if (typeof text !== 'string') {\n                        return null\n                      }\n                      return <ReactMarkdown renderers={{ paragraph: 'div' }} source={text} />\n                    }}\n                  </FormattedMessage>\n                </div>\n              ) : (\n                undefined\n              )}\n            </div>\n          </div>\n          <div\n            style={{\n              width: '100%',\n              display: 'flex',\n              flexDirection: 'row',\n            }}\n          >\n            <div style={{ flex: 1 }} />\n            <ButtonBar className={'button-bar'}>\n              <button\n                onClick={this.onReset}\n                style={{\n                  backgroundColor: scheme.primary,\n                  color: scheme.textPrimary,\n                }}\n              >\n                <FormattedMessage id={'action.reset'} />\n              </button>\n              <button\n                onClick={this.onSave}\n                style={{\n                  backgroundColor: scheme.primary,\n                  color: scheme.textPrimary,\n                }}\n              >\n                <FormattedMessage id={'action.save'} />\n              </button>\n            </ButtonBar>\n          </div>\n        </PreferenceItem>\n      </PreferenceGroup>\n    )\n\n    return <div>{customTab}</div>\n  }\n}\n","import Responsive from 'react-responsive'\nimport React from 'react'\n\nexport const Mobile = (props: any) => <Responsive {...props} maxWidth={425} />\nexport const Tablet = (props: any) => <Responsive {...props} minWidth={426} maxWidth={768} />\nexport const Default = (props: any) => <Responsive {...props} minWidth={769} />\n","import React, { Component } from 'react'\nimport {\n  Link,\n  Route,\n  Switch,\n  NavLink,\n  Redirect,\n  RouteComponentProps,\n  match as Match,\n} from 'react-router-dom'\nimport { FormattedMessage, injectIntl } from 'react-intl'\nimport { connect } from 'react-redux'\nimport { updateLanguage, updateTheme, updateSlogan } from '../redux/actions/settingsAction'\nimport { getTheme } from '../theme'\nimport { hexToRgbA } from '../utils/colorUtil'\nimport { Helmet } from 'react-helmet'\nimport { MdClose, MdMoreVert } from 'react-icons/md'\nimport { AppearanceTab, AboutTab, SloganTab, LanguageTab } from './tabs'\nimport styled from 'styled-components'\nimport { Dispatch } from 'redux'\nimport AppHeader from '../components/appHeader'\nimport { Default, Mobile, Tablet } from '../components/responsive'\n\nconst Root = styled.div`\n  min-height: 100vh;\n  box-sizing: border-box;\n`\n\nconst Sider = styled.div`\n  padding: 16px;\n  border: 0 solid;\n  border-right-width: 1px;\n  height: 100%;\n  min-height: 100%;\n  display: flex;\n  flex-direction: column;\n\n  .selected {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    box-sizing: border-box;\n    border-right-width: 0;\n    flex-direction: row;\n    width: 100%;\n    height: auto;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n      width: 0 !important;\n    }\n  }\n`\n\nconst NavItem = styled(NavLink)`\n  text-decoration: none;\n  padding: 8px 32px 8px 16px;\n  margin-bottom: 16px;\n  margin-right: 8px;\n  font-size: 1rem;\n  white-space: pre;\n  font-weight: 500;\n\n  :hover {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  &.active {\n    border-radius: 8px;\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  @media (max-width: 768px) {\n    padding: 8px 16px 8px 16px;\n    margin-right: 8px;\n  }\n`\n\nconst ContentContainer = styled.div`\n  width: 100%;\n  padding: 0 16px;\n  display: flex;\n  box-sizing: border-box;\n  flex-direction: column;\n`\n\ninterface Props {\n  theme: string\n}\n\nconst mapStateToProps = (state: any) => ({\n  language: state.settings.language,\n  theme: state.settings.theme,\n  slogan: state.settings.slogan,\n  interval: state.settings.interval,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  updateLanguage: (language: string) => dispatch(updateLanguage(language)),\n  updateTheme: (theme: string) => dispatch(updateTheme(theme)),\n  updateSlogan: (slogan: string) => dispatch(updateSlogan(slogan)),\n})\n\nclass SettingsPage extends Component<RouteComponentProps & Props> {\n  state = {\n    showMenu: true,\n  }\n\n  render() {\n    const { match, theme } = this.props\n    const palette = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id='settings'>\n        {name => (\n          <Helmet>\n            <title>{name}</title>\n          </Helmet>\n        )}\n      </FormattedMessage>\n    )\n\n    const renderRedirect = ((m: Match<any>) => () => <Redirect to={`${m.url}/appearance`} />)(match)\n\n    const content = (\n      <ContentContainer>\n        <Switch>\n          <Route\n            exact\n            path={`${match.url}/slogan`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(injectIntl(SloganTab))}\n          />\n          <Route\n            exact\n            path={`${match.url}/language`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(LanguageTab)}\n          />\n          <Route\n            exact\n            path={`${match.url}/appearance`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(AppearanceTab)}\n          />\n          <Route\n            exact\n            path={`${match.url}/about`}\n            component={connect(\n              mapStateToProps,\n              mapDispatchToProps,\n            )(AboutTab)}\n          />\n          <Route render={renderRedirect} />\n        </Switch>\n      </ContentContainer>\n    )\n\n    const links = ['appearance', 'slogan', 'language', 'about']\n\n    const closeIcon = (\n      <Link to={'/'}>\n        <MdClose\n          style={{\n            color: palette.textPrimary,\n            fontSize: '2em',\n            verticalAlign: 'middle',\n          }}\n        />\n      </Link>\n    )\n\n    const moreIcon = (\n      <MdMoreVert\n        style={{\n          color: palette.textPrimary,\n          fontSize: '2em',\n          verticalAlign: 'middle',\n        }}\n        onClick={((page, showMenu) => () => page.setState({ showMenu }))(\n          this,\n          !this.state.showMenu,\n        )}\n      />\n    )\n\n    const navItems = links.map((link, key) => (\n      <NavItem\n        key={key}\n        activeClassName={'selected'}\n        activeStyle={{ color: palette.textPrimary }}\n        style={{ color: palette.textSecondary }}\n        to={`${match.url}/${link}`}\n      >\n        <FormattedMessage id={`settings.${link}`} />\n      </NavItem>\n    ))\n\n    const desktopView = (\n      <Default>\n        <main\n          style={{\n            height: '100%',\n            display: 'flex',\n            flexDirection: 'row',\n          }}\n        >\n          <Sider\n            style={{\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\n            }}\n          >\n            {navItems}\n          </Sider>\n          {content}\n        </main>\n      </Default>\n    )\n\n    const tabletView = (\n      <Tablet>\n        <main\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          <Sider\n            style={{\n              borderColor: hexToRgbA(palette.textSecondary, 0.2),\n            }}\n          >\n            {navItems}\n          </Sider>\n          {content}\n        </main>\n      </Tablet>\n    )\n    const mobileView = (\n      <Mobile>\n        <main\n          style={{\n            width: '100%',\n            display: 'flex',\n            flexDirection: 'column',\n          }}\n        >\n          {this.state.showMenu ? (\n            <Sider\n              style={{\n                borderColor: hexToRgbA(palette.textSecondary, 0.2),\n                width: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n              }}\n            >\n              {navItems}\n            </Sider>\n          ) : (\n            undefined\n          )}\n          {content}\n        </main>\n      </Mobile>\n    )\n    return (\n      <Root\n        style={{\n          backgroundColor: palette.background,\n          color: palette.textPrimary,\n        }}\n      >\n        {meta}\n        <FormattedMessage id='settings'>\n          {title => [\n            <Default key={0}>\n              <AppHeader title={title} rightExtra={closeIcon} />\n            </Default>,\n            <Tablet key={1}>\n              <AppHeader title={title} leftExtra={closeIcon} />\n            </Tablet>,\n            <Mobile key={2}>\n              <AppHeader title={title} leftExtra={closeIcon} rightExtra={moreIcon} />\n            </Mobile>,\n          ]}\n        </FormattedMessage>\n        {desktopView}\n        {tabletView}\n        {mobileView}\n      </Root>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SettingsPage)\n","import I18n from './i18n'\n\nexport default {\n  appName: '我爱工作',\n\n  'slogan.default': `**优秀**|是一种习惯\n**优秀**|是与生俱来的天赋\n**我爱工作**\n我徜徉在工作的海洋里\n上司叫我吃饭|我充耳不闻\n同事喊我喝水|我无动于衷\n老板喊我睡觉|我百般推辞`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '设置',\n  'settings.application': '应用程序',\n  'settings.appearance': '界面',\n  'settings.language': '语言',\n  'settings.language.default': '跟随系统',\n  'settings.about': '关于',\n  'settings.slogan': '标语',\n  'settings.slogan.syntax': '语法说明',\n  'settings.slogan.syntax.summary': `一行语句为一段，使用 | 进行段内分行\n\n另外支持使用部分简单的 Markdown 语法：\n\n\\`**加粗**\\` ⇨ **加粗**\n\n\\`*斜体*\\` ⇨ *斜体*\n\n\\`~~删除~~\\` ⇨ ~~删除~~`,\n  'settings.slogan.custom': '自定义标语',\n  'settings.slogan.interval': '时间间隔',\n  'settings.about.release_note': '更新日志',\n  'settings.appearance.theme': '主题',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: '我愛工作',\n\n  'slogan.default': `**優秀**|是一種習慣\n**優秀**|是與生俱來的天賦\n**我愛工作**\n工作使我快樂\n我徜徉在工作的海洋裡\n上司叫我吃飯|我充耳不聞\n同事喊我喝水|我無動於衷\n老闆喊我睡覺|我百般推辭`,\n  'action.ok': '好的',\n  'action.save': '保存',\n  'action.save.success': '保存成功',\n  'action.cancel': '取消',\n  'action.reset': '重置',\n\n  settings: '設置',\n  'settings.application': '應用程序',\n  'settings.appearance': '界面',\n  'settings.language': '語言',\n  'settings.language.default': '跟隨系統',\n  'settings.about': '關於',\n  'settings.slogan': '標語',\n  'settings.slogan.syntax': '語法說明',\n  'settings.slogan.syntax.summary': `一行語句為一段，使用 | 進行段內分行\n\n另外支持使用部分簡單的 Markdown 語法：\n\n\\`**加粗**\\` ⇨ **加粗**\n\n\\`*斜體*\\` ⇨ *斜體*\n\n\\`~~刪除~~\\` ⇨ ~~刪除~~`,\n  'settings.slogan.custom': '自定義標語',\n  'settings.slogan.interval': '時間間隔',\n  'settings.about.release_note': '更新日誌',\n  'settings.appearance.theme': '主題',\n  'settings.appearance.theme.white': '白 色',\n  'settings.appearance.theme.black': '黑 色',\n  'settings.appearance.theme.light': '亮 色',\n  'settings.appearance.theme.dark': '暗 色',\n  'settings.appearance.theme.chrome-dark': 'Chrome(暗)',\n} as I18n\n","import I18n from './i18n'\n\nexport default {\n  appName: 'I ❤ Works',\n\n  'slogan.default': `**Excellent**| is a habit\n**Excellent**| is a gift\n**I love working**\nWorking makes me happy\nI am in the ocean of work\nBoss told me to have lunch | I turn a deaf ear\nColleagues call me to drink | I am indifferent\nManager call me to sleep | I refuse strongly`,\n  'action.ok': 'OK',\n  'action.save': 'Save',\n  'action.save.success': 'Saved successfully',\n  'action.cancel': 'Cancel',\n  'action.reset': 'Reset',\n\n  settings: 'Settings',\n  'settings.application': 'Application',\n  'settings.appearance': 'Appearance',\n  'settings.language': 'Language',\n  'settings.language.default': 'Default',\n  'settings.about': 'About',\n  'settings.slogan': 'Slogan',\n  'settings.slogan.syntax': 'Syntax description',\n  'settings.slogan.syntax.summary': `\nOne line statement is a paragraph, use '|' to perform line break\n\nAnd you can use some basic Markdown inline syntax:\n\n\\`**Bold**\\` ⇨ **Bold**\n\n\\`*Italic*\\` ⇨ *Italic*\n\n\\`~~Delete~~\\` ⇨ ~~Delete~~`,\n  'settings.slogan.custom': 'Custom slogan',\n  'settings.slogan.interval': 'Interval',\n  'settings.about.release_note': 'Release Notes',\n  'settings.appearance.theme': 'Theme',\n  'settings.appearance.theme.white': 'White',\n  'settings.appearance.theme.black': 'Black',\n  'settings.appearance.theme.light': 'Light',\n  'settings.appearance.theme.dark': 'Dark',\n  'settings.appearance.theme.chrome-dark': 'Chrome Dark',\n} as I18n\n","import zhHans from './zhHans'\nimport zhHant from './zhHant'\nimport enUS from './enUS'\nimport I18n from './i18n'\n\nexport function getLocale(language: string): I18n {\n  let target = language\n  if (!target) {\n    // @ts-ignore\n    target = navigator.userLanguage || navigator.language\n  }\n  switch (target.toLocaleLowerCase()) {\n    case 'zh':\n    case 'zh-hans':\n    case 'zh-cn':\n      return zhHans\n    case 'zh-hk':\n    case 'zh-tw':\n    case 'zh-mo':\n    case 'zh-sg':\n    case 'zh-hant':\n      return zhHant\n    default:\n      return enUS\n  }\n}\n","import React, { Component } from 'react'\n\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom'\n\nimport HomePage from './containers/homePage'\nimport SettingsPage from './containers/settingsPage'\n\nimport { connect } from 'react-redux'\n\nimport { getLocale } from './locale'\n\nimport { addLocaleData, FormattedMessage, IntlProvider } from 'react-intl'\nimport zh from 'react-intl/locale-data/zh'\nimport en from 'react-intl/locale-data/en'\nimport { Helmet } from 'react-helmet'\n\nimport { getTheme } from './theme'\nimport { getQueryParamsFromUrl } from './utils/urlUtil'\n\naddLocaleData([...en, ...zh])\n\ninterface Props {\n  theme: string\n  language: string\n}\n\nclass App extends Component<Props> {\n  render() {\n    const theme = this.props.theme\n    const scheme = getTheme(theme)\n\n    const meta = (\n      <FormattedMessage id={'appName'}>\n        {appName => (\n          <Helmet>\n            <meta charSet='utf-8' />\n            <title>{appName}</title>\n            <meta name='theme-color' content={scheme.background} />\n          </Helmet>\n        )}\n      </FormattedMessage>\n    )\n\n    const route = (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path={'/'} component={HomePage} />\n          <Route path={'/settings'} component={SettingsPage} />\n          <Route render={(() => () => <Redirect to={'/'} />)()} />\n        </Switch>\n      </BrowserRouter>\n    )\n\n    return (\n      <IntlProvider locale={navigator.language} messages={getLocale(this.props.language)}>\n        <div>\n          {meta}\n          {route}\n        </div>\n      </IntlProvider>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    language: getQueryParamsFromUrl('lang') || state.settings.language,\n    theme: state.settings.theme,\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n)\n\ntype Config = {\n  onSuccess?(registration: ServiceWorkerRegistration): void\n  onUpdate?(registration: ServiceWorkerRegistration): void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker === null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType !== null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import * as types from '../actionTypes'\nimport { AnyAction } from 'redux'\n\nconst initialState = {}\n\nexport function SettingsReducer(state = initialState, action: AnyAction) {\n  switch (action.type) {\n    case types.UPDATE_LANGUAGE:\n      return {\n        ...state,\n        language: action.language,\n      }\n    case types.UPDATE_THEME:\n      return {\n        ...state,\n        theme: action.theme,\n      }\n    case types.UPDATE_SLOGAN:\n      return {\n        ...state,\n        slogan: action.slogan,\n      }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport { SettingsReducer } from './settingsReducer'\n\nconst rootReducer = combineReducers({\n  settings: SettingsReducer,\n})\n\nexport default rootReducer\n","import { applyMiddleware, createStore } from 'redux'\nimport * as actionCreators from './actions/settingsAction'\nimport logger from 'redux-logger'\nimport { persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from './reducers/index'\n\nconst middlewares = [logger]\nconst createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore)\n\nconst enhancer =\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({ actionCreators })\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore() {\n  return createStoreWithMiddleware(persistedReducer, enhancer)\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app'\nimport * as ServiceWorker from './utils/registerServiceWorker'\nimport configureStore from './redux/configureStore'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistStore } from 'redux-persist'\n\nconst store = configureStore()\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate persistor={persistStore(store)}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n)\n\nServiceWorker.register()\n"],"sourceRoot":""}